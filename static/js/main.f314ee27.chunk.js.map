{"version":3,"sources":["mixkit-thunder-deep-rumble-1296.mp3","solene-min.png","CanvasManipulator.tsx","useCanvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CanvasManipulator","useState","width","setWidth","height","setHeight","isLoaded","setIsLoaded","image","setImage","canvasRef","canvasWidth","canvasHeight","draw","refresh","useRef","redrawMem","useCallback","context","clearRect","requestAnimationFrame","useEffect","canvasObject","current","getContext","useCanvas","drawImage","imageData","getImageData","offset","min","max","Math","ceil","floor","random","data","i","length","x","red","green","blue","offsetPixel","putImageData","Image","onload","src","artwork","className","ref","id","sound","require","Howl","loop","volume","autoplay","App","onClick","play","stop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f314ee27.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mixkit-thunder-deep-rumble-1296.e448f841.mp3\";","export default __webpack_public_path__ + \"static/media/solene-min.f9edd0e7.png\";","import React, { useState, useEffect } from 'react';\nimport { useCanvas } from \"./useCanvas\";\nimport artwork from './solene-min.png';\n\nfunction getRandomInt(min:number, max:number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction CanvasManipulator() {\n  const [width, setWidth] = useState<number>(600);\n  const [height, setHeight] = useState<number>(600);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const [image, setImage] = useState<HTMLImageElement|null>(null);\n  const { canvasRef } = useCanvas(width, height, draw, true);\n\n  useEffect(() => {\n     const image = new Image();\n     image.onload = () => {\n      setWidth(image.width);\n      setHeight(image.height);\n      setIsLoaded(true);\n     };\n     image.src = artwork;\n     setImage(image);\n  },[setImage]);\n\n  function draw(context: CanvasRenderingContext2D) {\n    if(!image || !isLoaded) {\n      return;\n    }\n    context.drawImage(image, 0, 0);\n  \n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const offset = getRandomInt(0, 5);\n\n    const { data } = imageData;\n    for (let i = 0; i < data.length; i += 4) {\n        const x = ((i/4) % image.width);\n        if(isNotBackground(data[i], data[i+1], data[i+2]) && ((x + offset) < image.width) && ((x + offset) >= 0)) {\n          const offsetPixel = (offset*4);\n          data[i] = data[i + offsetPixel]\n          data[i + 1] = data[i + offsetPixel + 1]\n          data[i + 2] = data[i + offsetPixel + 2]\n         } else {\n          // choose the pixel on the left before the move \n          data[i] = 255;\n          data[i + 1] = 255;\n          data[i + 2] = 255;\n        }\n    }\n    context.putImageData(imageData, 0, 0);\n\n  }\n\n  function isNotBackground(red: number, green: number, blue: number) : boolean {\n    return red <= 180 || green <= 180 || blue <= 180;\n  }\n  return (\n    <div className=\"App\">\n      <canvas ref={canvasRef} width={width} height={height} id=\"viewport\"></canvas>\n    </div>\n  );\n}\n\nexport default CanvasManipulator;\n","import { useRef, useEffect, useCallback } from \"react\";\n\nexport function useCanvas(canvasWidth: number , canvasHeight: number, draw: (context: CanvasRenderingContext2D) => void, refresh: boolean = false) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const redrawMem = useCallback(function redraw(context: CanvasRenderingContext2D) {\n    context.clearRect(0, 0, canvasWidth, canvasHeight);\n    draw(context);\n    requestAnimationFrame(() => redrawMem(context))\n  }, [draw, canvasWidth, canvasHeight]);\n\n  useEffect(() => {\n    const canvasObject = canvasRef.current;\n      if(!canvasObject) {\n        return;\n      }\n      const context = canvasObject.getContext(\"2d\");\n      if(!context) {\n        return;\n      }\n\n      if(refresh) {\n        requestAnimationFrame(() =>redrawMem(context));\n       } else {\n        redrawMem(context);\n      }\n  }, [canvasRef, canvasWidth, canvasHeight, draw, refresh, redrawMem]);\n\n  return { canvasRef };\n}","import React from 'react';\nimport { Howl, Howler } from 'howler';\nimport CanvasManipulator from \"./CanvasManipulator\";\nimport './App.css';\n// only for deployment\nconst music = require('./mixkit-thunder-deep-rumble-1296.mp3');\n\n  const sound = new Howl({\n    src: ['./mixkit-thunder-deep-rumble-1296.mp3'],\n    loop: true,\n    volume: 0.5,\n    autoplay: true\n  });\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"bg\"></div>\n      <div className=\"lightning flashit\"></div>\n      <header className=\"App-header\">\n        <h1>Orage et parapluie</h1>\n        <CanvasManipulator />\n        <div className=\"buttons\">\n          <button onClick={() => sound.play()}>Play</button>\n          <button onClick={() => sound.stop()}>Stop</button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}